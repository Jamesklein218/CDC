// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwitchChat.Infrastructure.Persistence;

#nullable disable

namespace TwitchChat.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(TwitchChatDbContext))]
    [Migration("20251029134449_TestNewMigration")]
    partial class TestNewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TwitchChat.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<string>("TwitchLivestreamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitchUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("TwitchChat.Domain.Entities.ChatUser", b =>
                {
                    b.Property<string>("TwitchUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SubscribeCount")
                        .HasColumnType("int");

                    b.Property<long>("TotalSubscribeMoney")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TwitchUserId");

                    b.ToTable("ChatUsers");
                });

            modelBuilder.Entity("TwitchChat.Domain.Entities.ChatUserSessionScore", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("LeaderboardSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("UserId", "LeaderboardSessionId");

                    b.HasIndex("LeaderboardSessionId");

                    b.ToTable("ChatUserSessionScores");
                });

            modelBuilder.Entity("TwitchChat.Domain.Entities.LeaderboardSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentToSpam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LivestreamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("LeaderboardSessions");
                });

            modelBuilder.Entity("TwitchChat.Domain.Entities.LiveStreamSession", b =>
                {
                    b.Property<string>("TwitchLivestreamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TwitchLivestreamId");

                    b.ToTable("LiveStreamSessions");
                });

            modelBuilder.Entity("TwitchChat.Domain.Entities.ChatUserSessionScore", b =>
                {
                    b.HasOne("TwitchChat.Domain.Entities.LeaderboardSession", "LeaderboardSession")
                        .WithMany("Participants")
                        .HasForeignKey("LeaderboardSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitchChat.Domain.Entities.ChatUser", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaderboardSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitchChat.Domain.Entities.ChatUser", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("TwitchChat.Domain.Entities.LeaderboardSession", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
